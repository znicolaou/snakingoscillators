import numpy as np
import pysindy as ps
import os

odd=run('sh',c='cycle_odd')
odd=run(odd(odd.getLabels()[-1]),c='cycle_odd',DS='-',A1=1)
sols=[]
pars=[]
for i in odd.getLabels():
    print(i, odd.getLabels()[-1], end='\r')
    sols=sols+[np.concatenate([odd(i).indepvararray.reshape(1,-1),odd(i).coordarray[:1]]).T]
    pars=pars+[np.concatenate([np.array(odd(i).PAR.values())[[0,1,2,10]],[(np.sum(np.diff(odd(i).indepvararray)[:,np.newaxis].T*np.abs(odd(i).coordarray[0,:-1])**2))**0.5]])]


np.save('odd_sols.npy',sols)
np.save('odd_pars.npy',pars)
cl()


sols = np.load("odd_sols.npy")
pars = np.load("odd_pars.npy")
if not os.path.exists("odd/"):
    os.mkdir("odd")
else:
    os.system("rm -r " + "odd")
    os.mkdir("odd")

evals = []
evecs = []
print()

for i in range(len(sols)):
    print("odd", i, len(sols), end="\r")
    t, u = sols[i].T
    b1, b3, b5, T, norm = pars[i]
    u = u[::5]
    t = t[::5]
    t = T * t
    u = np.concatenate([u, -np.flip(u)[1:]])
    t = np.concatenate([t, t[-1] + np.cumsum(np.flip(np.diff(t)))])

    ds = [1, 2, 3, 4]
    dx = np.zeros((len(ds), len(t), len(t)))
    for k in range(len(ds)):
        fd = ps.FiniteDifference(d=ds[k], axis=0, order=8, periodic=True)
        interior_coeffs = fd._coefficients(t)
        interior_inds = fd.stencil_inds
        slice_interior = slice((fd.n_stencil - 1) // 2, -(fd.n_stencil - 1) // 2)
        slice_boundary = np.concatenate(
            [
                np.arange(0, (fd.n_stencil - 1) // 2),
                -np.flip(1 + np.arange(1, (fd.n_stencil - 1) // 2)),
                np.array([-1]),
            ]
        )
        boundary_coeffs = fd._coefficients_boundary_periodic(t)
        boundary_inds = fd.stencil_inds

        for i in range(len(interior_inds)):
            dx[k][slice_interior][
                np.arange(len(interior_inds[i])), interior_inds[i]
            ] = interior_coeffs[:, i].T
        for j in slice_boundary:
            for i in range(len(boundary_inds)):
                dx[k][j][boundary_inds[i,j]] = boundary_coeffs[j, i]

    vals, vecs = np.linalg.eig(
        (b1-1 + 3 * b3 * u**2 - 5 * b5 * u**4)
        * np.eye(len(t))
        - 2 * dx[1]
        - dx[3]
    )
    evals = evals + [vals]
    evecs = evecs + [vecs]

inds = np.argsort(np.real(evals))[:, -4:]
stableinds = np.where(np.count_nonzero(np.real(np.array(evals)[tuple([np.arange(len(evals))[:, np.newaxis], inds])])>-1E-2,axis=1)<2)[0]

unstableinds = np.setdiff1d(np.arange(len(evals)),stableinds)
stable_xs = []
stable_ys = []
unstable_xs = []
unstable_ys = []
for inds in np.split(stableinds, np.where(np.diff(stableinds) != 1)[0] + 1):
    stable_xs.append(pars[inds, 0])
    stable_ys.append(pars[inds, -1])
for inds in np.split(unstableinds, np.where(np.diff(unstableinds) != 1)[0] + 1):
    unstable_xs.append(pars[inds, 0])
    unstable_ys.append(pars[inds, -1])
for i in range(len(stable_xs)):
    branch = np.array([stable_xs[i], stable_ys[i]])
    np.save("odd/stable_" + str(i), branch)
for i in range(len(unstable_xs)):
    branch = np.array([unstable_xs[i], unstable_ys[i]])
    np.save("odd/unstable_" + str(i), branch)
